{"ast":null,"code":"var _jsxFileName = \"/home/nathy/React_Apps/demo_1/src/pages/trader/Trades/Live.js\";\nimport React, { Component } from 'react';\nimport Stepone from './steps/Stepone';\nimport Steptwo from './steps/Steptwo';\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\n\nclass LiveTrade extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      step: 1,\n      entry_price: 0,\n      stop_loss1: 0,\n      signal_type: '',\n      tp1: 0,\n      tp2: 0,\n      time_frame: '',\n      comment: '',\n      errors: null,\n      response: '',\n      show: false,\n      // asset_type:'',\n      asset: ''\n    };\n\n    this.nextstep = () => {\n      const {\n        step\n      } = this.state;\n      this.setState({\n        step: step + 1\n      });\n    };\n\n    this.prevstep = () => {\n      const {\n        step\n      } = this.state;\n      this.setState({\n        step: step - 1\n      });\n    };\n\n    this.submit = async event => {\n      event.preventDefault();\n      console.log(this.state.tp1 + ' ' + this.state.signal_type + ' ' + this.state.tp1 + ' ' + this.state.tp2);\n      await axios.post('http://risk-api.sortika.com/api/v1/trade-requests/create', {\n        \"requestor\": this.props.AuthUser.id,\n        \"win_loss_ratio\": this.props.AuthUser.win_ratio,\n        \"asset\": this.state.asset,\n        \"entry_price\": this.state.entry_price,\n        \"take_profit_1\": this.state.tp1,\n        \"take_profit_2\": this.state.tp2,\n        \"stop_loss\": this.state.stop_loss1,\n        \"signal_type\": this.state.signal_type,\n        \"time_frame\": this.state.time_frame,\n        \"environment\": \"live\"\n      }).then(res => {\n        console.log(res);\n        this.setState({\n          response: res.data.message,\n          show: true\n        });\n      }).catch(err => {\n        console.log(err.response.data);\n        this.setState({\n          errors: err.response.data.errors,\n          show: true\n        });\n      });\n    };\n\n    this.handlechange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n  }\n\n  render() {\n    const {\n      step,\n      entry_price,\n      stop_loss1,\n      signal_type,\n      tp1,\n      tp2,\n      time_frame,\n      comment,\n      asset,\n      asset_type,\n      errors,\n      response\n    } = this.state;\n    const values = {\n      entry_price,\n      stop_loss1,\n      signal_type,\n      tp1,\n      tp2,\n      time_frame,\n      comment,\n      asset,\n      asset_type,\n      errors,\n      response\n    };\n\n    switch (step) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Stepone, {\n          nextstep: this.nextstep,\n          handlechange: this.handlechange,\n          values: values,\n          submit: this.submit,\n          modalshow: this.state.show,\n          hide: () => this.setState({\n            show: false\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }\n        });\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Steptwo, {\n          prevstep: this.prevstep,\n          handlechange: this.handlechange,\n          values: values,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }\n        });\n      // case 3:\n      //         return (\n      //             <Steptre\n      //                   prevstep={this.prevstep}\n      //                     handlechange={this.handlechange}\n      //                     values={values}\n      //             />\n      //         )\n\n      default:\n        return null;\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    AuthUser: state.Auth.user //   Token:state.Auth.token ,\n    //   bal:state.Auth.trader_acc_balance\n\n  };\n};\n\nexport default connect(mapStateToProps)(LiveTrade);","map":{"version":3,"sources":["/home/nathy/React_Apps/demo_1/src/pages/trader/Trades/Live.js"],"names":["React","Component","Stepone","Steptwo","connect","axios","LiveTrade","state","step","entry_price","stop_loss1","signal_type","tp1","tp2","time_frame","comment","errors","response","show","asset","nextstep","setState","prevstep","submit","event","preventDefault","console","log","post","props","AuthUser","id","win_ratio","then","res","data","message","catch","err","handlechange","target","name","value","render","asset_type","values","mapStateToProps","Auth","user"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Stepone from './steps/Stepone';\nimport Steptwo from './steps/Steptwo';\nimport { connect } from \"react-redux\"\nimport axios from 'axios'\n\n\nclass LiveTrade extends Component {\n\n    state={\n        step:1,\n        entry_price:0,\n        stop_loss1:0,\n        signal_type:'',\n        tp1:0,\n        tp2:0,\n        time_frame:'',\n        comment:'',\n        errors:null,\n        response:'',\n        show:false,\n        // asset_type:'',\n        asset:''\n    }\n\n    nextstep = () =>{\n\n        const { step } =this.state\n        this.setState({step:step+1})\n    }\n\n    prevstep = () =>{\n\n        const { step } =this.state\n        this.setState({step:step-1})\n    }\n\n    \n    \n    submit=async(event)=>{\n        event.preventDefault()\n\n        console.log(this.state.tp1+' '+this.state.signal_type+' '+this.state.tp1+' '+this.state.tp2)\n        await axios.post('http://risk-api.sortika.com/api/v1/trade-requests/create',{\n            \"requestor\": this.props.AuthUser.id,\n            \"win_loss_ratio\": this.props.AuthUser.win_ratio,\n            \"asset\":this.state.asset,\n            \"entry_price\": this.state.entry_price,\n            \"take_profit_1\":this.state.tp1,\n            \"take_profit_2\": this.state.tp2,\n            \"stop_loss\": this.state.stop_loss1,\n            \"signal_type\":this.state.signal_type,\n            \"time_frame\": this.state.time_frame,\n            \"environment\":\"live\"\n        }).then((res)=>{\n            console.log(res)\n\n                this.setState({response:res.data.message,show:true})\n           \n        })\n        .catch((err)=>{\n            console.log(err.response.data)\n\n            this.setState({errors:err.response.data.errors,show:true})\n        \n        })\n    }\n\n    handlechange=(event)=>{\n\n        this.setState({[event.target.name]:event.target.value})\n\n    }\n  render() {\n    const {step,entry_price,stop_loss1,signal_type,tp1,tp2,time_frame,comment,asset,asset_type,errors,response} =this.state\n    const values={entry_price,stop_loss1,signal_type,tp1,tp2,time_frame,comment,asset,asset_type,errors,response}\n\n    switch(step){\n        case 1:\n            return (\n                <Stepone \n                nextstep={this.nextstep}\n                handlechange={this.handlechange}\n                values={values}\n                submit={this.submit}\n                modalshow={this.state.show}\n                hide={()=>this.setState({show:false})}\n            />\n            )\n\n        case 2:\n            return (\n                <Steptwo\n                     prevstep={this.prevstep}\n                        handlechange={this.handlechange}\n                        values={values}\n                />\n            )\n        // case 3:\n        //         return (\n        //             <Steptre\n        //                   prevstep={this.prevstep}\n        //                     handlechange={this.handlechange}\n        //                     values={values}\n        //             />\n        //         )\n\n         default:\n                 return null\n        \n\n    }\n  }\n}\n\nconst mapStateToProps=(state)=>{\n    return{\n      AuthUser:state.Auth.user, \n    //   Token:state.Auth.token ,\n    //   bal:state.Auth.trader_acc_balance\n  \n    }\n  }\nexport default connect(mapStateToProps)(LiveTrade)"]},"metadata":{},"sourceType":"module"}