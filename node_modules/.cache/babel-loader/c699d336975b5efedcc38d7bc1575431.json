{"ast":null,"code":"import axios from 'axios'; // import { MyfxbookApi } from 'myfxbook-api-client';\n\nimport * as calc from './functionz'; //state actions\n\nexport const stateError = error => ({\n  type: 'STATE_HAS_ERROR',\n  error\n}); //Auth Actions\n\nexport const registerStart = () => ({\n  type: 'REGISTER_START'\n});\nexport const registerFinished = (user, token, usertype) => ({\n  type: 'REGISTER_FINISHED',\n  user,\n  token,\n  usertype\n});\nexport const registerError = error => ({\n  type: 'REGISTER_ERROR',\n  error\n});\nexport const forexstart = () => ({\n  type: 'FETCH_START'\n});\nexport const forexfinished = rates => ({\n  type: 'FETCH_END',\n  rates\n});\nexport const forexerr = error => ({\n  type: 'FETCH_ERROR',\n  error\n});\nexport const registerClientUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  await axios.post('https://api.sortika.com/client/register', {\n    username: username,\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(registerFinished(res.data.user, res.data.access_token, 'client'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(registerError(error));\n  });\n};\nexport const registerTraderUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  let myfxprofile;\n  await axios.post('https://api.sortika.com/trader/myfx/', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res);\n\n    switch (res.data.status) {\n      case 419:\n        dispatch(stateError(res.data.info));\n        break;\n\n      case 417:\n        dispatch(stateError(res.data.info));\n        break;\n\n      case 200:\n        //calculate win ratio\n        let win_ratio = await calc.calculateWin(res.data.history);\n        let loss_ratio = await calc.calculateloss(res.data.history);\n        let avgprofit = await calc.calc_profitfactor(res.data.acc); // console.log(win_ratio+ ' '+loss_ratio+' '+avgprofit)\n        //calculate profit ratio\n        //calculate profit factor\n\n        await axios.post('https://api.sortika.com/trader/register', {\n          username: username,\n          email: email,\n          password: pass,\n          win_ratio: win_ratio,\n          loss_ratio: loss_ratio,\n          profit_factor: avgprofit\n        }).then(async res => {\n          console.log(res.data);\n          await dispatch(registerFinished(res.data.user, res.data.access_token, 'trader'));\n        }).catch(error => {\n          console.log(error);\n          dispatch(registerError(error));\n        });\n        break;\n\n      default:\n        dispatch(stateError('Server not available'));\n    }\n  }).catch(error => {\n    dispatch(stateError(error.message));\n    console.log(error);\n  });\n};\nexport const loginStart = () => ({\n  type: 'LOGIN_START'\n});\nexport const loginFinished = (user, token, usertype) => ({\n  type: 'LOGIN_FINISHED',\n  user,\n  token,\n  usertype\n});\nexport const loginError = error => ({\n  type: 'LOGIN_ERROR',\n  error\n});\nexport const loginClientUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('client ..............');\n  await axios.post('https://api.sortika.com/client/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token, 'client'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const loginTraderUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('trader ..............');\n  await axios.post('https://api.sortika.com/trader/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token, 'trader'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const logoutStart = () => ({\n  type: 'LOGOUT_START'\n});\nexport const logoutFinished = () => ({\n  type: 'LOGOUT_FINISHED'\n});\nexport const logoutError = error => ({\n  type: 'LOGOUT_ERROR',\n  error\n});\nexport const logoutClientUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/client/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};\nexport const logoutTraderUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/trader/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};\nexport const getForex = () => async dispatch => {\n  dispatch(forexstart());\n  await axios.get('https://www.freeforexapi.com/api/live?pairs=EURGBP,USDJPY,USDCAD,USDEUR,USDNZD').then(res => {\n    console.log(res);\n  }).catch(error => {\n    console.log(error);\n  });\n};","map":{"version":3,"sources":["/home/nathy/React_Apps/demo_1/src/pages/redux/Action.js"],"names":["axios","calc","stateError","error","type","registerStart","registerFinished","user","token","usertype","registerError","forexstart","forexfinished","rates","forexerr","registerClientUser","username","email","pass","dispatch","post","password","then","res","console","log","data","access_token","catch","registerTraderUser","myfxprofile","status","info","win_ratio","calculateWin","history","loss_ratio","calculateloss","avgprofit","calc_profitfactor","acc","profit_factor","message","loginStart","loginFinished","loginError","loginClientUser","loginTraderUser","logoutStart","logoutFinished","logoutError","logoutClientUser","logoutTraderUser","getForex","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAO,KAAKC,IAAZ,MAAsB,aAAtB,C,CAGI;;AAEA,OAAO,MAAMC,UAAU,GAAGC,KAAK,KAAK;AAClCC,EAAAA,IAAI,EAAC,iBAD6B;AAElCD,EAAAA;AAFkC,CAAL,CAAxB,C,CAIP;;AACA,OAAO,MAAME,aAAa,GAAG,OAAO;AAClCD,EAAAA,IAAI,EAAE;AAD4B,CAAP,CAAtB;AAIP,OAAO,MAAME,gBAAgB,GAAG,CAACC,IAAD,EAAMC,KAAN,EAAYC,QAAZ,MAA0B;AACxDL,EAAAA,IAAI,EAAE,mBADkD;AAExDG,EAAAA,IAFwD;AAGxDC,EAAAA,KAHwD;AAIxDC,EAAAA;AAJwD,CAA1B,CAAzB;AAOP,OAAO,MAAMC,aAAa,GAAGP,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAC,gBADgC;AAErCD,EAAAA;AAFqC,CAAL,CAA3B;AAKP,OAAO,MAAMQ,UAAU,GAAC,OAAK;AAC3BP,EAAAA,IAAI,EAAC;AADsB,CAAL,CAAjB;AAKP,OAAO,MAAMQ,aAAa,GAAEC,KAAD,KAAU;AACnCT,EAAAA,IAAI,EAAC,WAD8B;AAEnCS,EAAAA;AAFmC,CAAV,CAApB;AAKP,OAAO,MAAMC,QAAQ,GAAEX,KAAD,KAAU;AAC9BC,EAAAA,IAAI,EAAC,aADyB;AAE9BD,EAAAA;AAF8B,CAAV,CAAf;AAKR,OAAO,MAAMY,kBAAkB,GAAI,CAACC,QAAD,EAAUC,KAAV,EAAgBC,IAAhB,KAAyB,MAAMC,QAAN,IAAiB;AAC1EA,EAAAA,QAAQ,CAACd,aAAa,EAAd,CAAR;AAIA,QAAML,KAAK,CAACoB,IAAN,CAAW,yCAAX,EACN;AACEJ,IAAAA,QAAQ,EAACA,QADX;AAEEC,IAAAA,KAAK,EAACA,KAFR;AAGEI,IAAAA,QAAQ,EAACH;AAHX,GADM,EAMLI,IANK,CAMC,MAAMC,GAAN,IAAY;AAEjBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACG,UAAOP,QAAQ,CAACb,gBAAgB,CAACiB,GAAG,CAACG,IAAJ,CAASnB,IAAV,EAAegB,GAAG,CAACG,IAAJ,CAASC,YAAxB,EAAqC,QAArC,CAAjB,CAAf;AACA,GAVC,EAYTC,KAZS,CAYDzB,KAAD,IAAU;AAEhBqB,IAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACAgB,IAAAA,QAAQ,CAACT,aAAa,CAACP,KAAD,CAAd,CAAR;AAGD,GAlBS,CAAN;AAmBD,CAxBK;AAyBP,OAAO,MAAM0B,kBAAkB,GAAI,CAACb,QAAD,EAAUC,KAAV,EAAgBC,IAAhB,KAAyB,MAAMC,QAAN,IAAiB;AAC1EA,EAAAA,QAAQ,CAACd,aAAa,EAAd,CAAR;AACE,MAAIyB,WAAJ;AAEA,QAAM9B,KAAK,CAACoB,IAAN,CAAW,sCAAX,EACR;AACEH,IAAAA,KAAK,EAACA,KADR;AAEEI,IAAAA,QAAQ,EAACH;AAFX,GADQ,EAILI,IAJK,CAIA,MAAMC,GAAN,IAAY;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,YAAQA,GAAG,CAACG,IAAJ,CAASK,MAAjB;AAEE,WAAK,GAAL;AACEZ,QAAAA,QAAQ,CAACjB,UAAU,CAACqB,GAAG,CAACG,IAAJ,CAASM,IAAV,CAAX,CAAR;AACA;;AAEA,WAAK,GAAL;AACEb,QAAAA,QAAQ,CAACjB,UAAU,CAACqB,GAAG,CAACG,IAAJ,CAASM,IAAV,CAAX,CAAR;AACA;;AACA,WAAK,GAAL;AACE;AACE,YAAIC,SAAS,GAAC,MAAMhC,IAAI,CAACiC,YAAL,CAAkBX,GAAG,CAACG,IAAJ,CAASS,OAA3B,CAApB;AACA,YAAIC,UAAU,GAAC,MAAMnC,IAAI,CAACoC,aAAL,CAAmBd,GAAG,CAACG,IAAJ,CAASS,OAA5B,CAArB;AACA,YAAIG,SAAS,GAAE,MAAMrC,IAAI,CAACsC,iBAAL,CAAuBhB,GAAG,CAACG,IAAJ,CAASc,GAAhC,CAArB,CAJJ,CAMA;AACE;AACA;;AAEA,cAAMxC,KAAK,CAACoB,IAAN,CAAW,yCAAX,EACZ;AACEJ,UAAAA,QAAQ,EAACA,QADX;AAEEC,UAAAA,KAAK,EAACA,KAFR;AAGEI,UAAAA,QAAQ,EAACH,IAHX;AAIEe,UAAAA,SAAS,EAACA,SAJZ;AAKEG,UAAAA,UAAU,EAACA,UALb;AAMEK,UAAAA,aAAa,EAACH;AANhB,SADY,EASThB,IATS,CASH,MAAMC,GAAN,IAAY;AAEXC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACE,gBAAOP,QAAQ,CAACb,gBAAgB,CAACiB,GAAG,CAACG,IAAJ,CAASnB,IAAV,EAAegB,GAAG,CAACG,IAAJ,CAASC,YAAxB,EAAqC,QAArC,CAAjB,CAAf;AACC,SAbD,EAePC,KAfO,CAeCzB,KAAD,IAAU;AAEhBqB,UAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACAgB,UAAAA,QAAQ,CAACT,aAAa,CAACP,KAAD,CAAd,CAAR;AAGD,SArBO,CAAN;AAuBA;;AACJ;AACEgB,QAAAA,QAAQ,CAACjB,UAAU,CAAC,sBAAD,CAAX,CAAR;AA5CN;AA+CD,GArDK,EAqDH0B,KArDG,CAqDIzB,KAAD,IAAU;AACjBgB,IAAAA,QAAQ,CAACjB,UAAU,CAACC,KAAK,CAACuC,OAAP,CAAX,CAAR;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACD,GAxDK,CAAN;AA6DH,CAjEK;AAoEN,OAAO,MAAMwC,UAAU,GAAG,OAAO;AAC7BvC,EAAAA,IAAI,EAAE;AADuB,CAAP,CAAnB;AAIL,OAAO,MAAMwC,aAAa,GAAG,CAACrC,IAAD,EAAMC,KAAN,EAAYC,QAAZ,MAA0B;AACrDL,EAAAA,IAAI,EAAE,gBAD+C;AAErDG,EAAAA,IAFqD;AAGrDC,EAAAA,KAHqD;AAIrDC,EAAAA;AAJqD,CAA1B,CAAtB;AAOP,OAAO,MAAMoC,UAAU,GAAG1C,KAAK,KAAK;AAClCC,EAAAA,IAAI,EAAC,aAD6B;AAElCD,EAAAA;AAFkC,CAAL,CAAxB;AAIP,OAAO,MAAM2C,eAAe,GAAI,CAAC7B,KAAD,EAAOC,IAAP,KAAgB,MAAMC,QAAN,IAAiB;AAC/DA,EAAAA,QAAQ,CAACwB,UAAU,EAAX,CAAR;AACAnB,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEA,QAAMzB,KAAK,CAACoB,IAAN,CAAW,sCAAX,EACN;AACEH,IAAAA,KAAK,EAACA,KADR;AAEEI,IAAAA,QAAQ,EAACH;AAFX,GADM,EAKLI,IALK,CAKC,MAAMC,GAAN,IAAY;AAEjBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACG,UAAOP,QAAQ,CAACyB,aAAa,CAACrB,GAAG,CAACG,IAAJ,CAASnB,IAAV,EAAegB,GAAG,CAACG,IAAJ,CAASC,YAAxB,EAAqC,QAArC,CAAd,CAAf;AACA,GATC,EAWTC,KAXS,CAWDzB,KAAD,IAAU;AAEhBqB,IAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACAgB,IAAAA,QAAQ,CAAC0B,UAAU,CAAC1C,KAAD,CAAX,CAAR;AAGD,GAjBS,CAAN;AAkBD,CAtBM;AAuBP,OAAO,MAAM4C,eAAe,GAAI,CAAC9B,KAAD,EAAOC,IAAP,KAAgB,MAAMC,QAAN,IAAiB;AAC/DA,EAAAA,QAAQ,CAACwB,UAAU,EAAX,CAAR;AACAnB,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,QAAMzB,KAAK,CAACoB,IAAN,CAAW,sCAAX,EACN;AACEH,IAAAA,KAAK,EAACA,KADR;AAEEI,IAAAA,QAAQ,EAACH;AAFX,GADM,EAKLI,IALK,CAKC,MAAMC,GAAN,IAAY;AAEjBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB;AACG,UAAOP,QAAQ,CAACyB,aAAa,CAACrB,GAAG,CAACG,IAAJ,CAASnB,IAAV,EAAegB,GAAG,CAACG,IAAJ,CAASC,YAAxB,EAAqC,QAArC,CAAd,CAAf;AACA,GATC,EAWTC,KAXS,CAWDzB,KAAD,IAAU;AAEhBqB,IAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACAgB,IAAAA,QAAQ,CAAC0B,UAAU,CAAC1C,KAAD,CAAX,CAAR;AAGD,GAjBS,CAAN;AAkBD,CArBM;AAuBP,OAAO,MAAM6C,WAAW,GAAG,OAAO;AAChC5C,EAAAA,IAAI,EAAE;AAD0B,CAAP,CAApB;AAIR,OAAO,MAAM6C,cAAc,GAAG,OAAO;AAClC7C,EAAAA,IAAI,EAAE;AAD4B,CAAP,CAAvB;AAIN,OAAO,MAAM8C,WAAW,GAAG/C,KAAK,KAAK;AACnCC,EAAAA,IAAI,EAAE,cAD6B;AAEnCD,EAAAA;AAFmC,CAAL,CAAzB;AAKX,OAAO,MAAMgD,gBAAgB,GAAK3C,KAAD,IAAW,MAAMW,QAAN,IAAmB;AAC7DK,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAN,EAAAA,QAAQ,CAAC6B,WAAW,EAAZ,CAAR,CAF6D,CAG7D;;AACA,QAAOhD,KAAK,CAACoB,IAAN,CAAW,iDAA+CZ,KAA1D,EACNc,IADM,CACD,MAAM;AACRH,IAAAA,QAAQ,CAAC8B,cAAc,EAAf,CAAR;AACH,GAHM,EAGJrB,KAHI,CAGGzB,KAAD,IAAS;AAEdgB,IAAAA,QAAQ,CAAC+B,WAAW,CAAC/C,KAAD,CAAZ,CAAR;AAEH,GAPM,CAAP;AAQC,CAZI;AAaP,OAAO,MAAMiD,gBAAgB,GAAK5C,KAAD,IAAW,MAAMW,QAAN,IAAmB;AAC7DK,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAN,EAAAA,QAAQ,CAAC6B,WAAW,EAAZ,CAAR,CAF6D,CAG7D;;AACA,QAAOhD,KAAK,CAACoB,IAAN,CAAW,iDAA+CZ,KAA1D,EACNc,IADM,CACD,MAAM;AACRH,IAAAA,QAAQ,CAAC8B,cAAc,EAAf,CAAR;AACH,GAHM,EAGJrB,KAHI,CAGGzB,KAAD,IAAS;AAEdgB,IAAAA,QAAQ,CAAC+B,WAAW,CAAC/C,KAAD,CAAZ,CAAR;AAEH,GAPM,CAAP;AAQC,CAZI;AAcL,OAAO,MAAMkD,QAAQ,GAAC,MAAI,MAAMlC,QAAN,IAAiB;AACzCA,EAAAA,QAAQ,CAACR,UAAU,EAAX,CAAR;AAEE,QAAMX,KAAK,CAACsD,GAAN,CAAU,gFAAV,EAA4FhC,IAA5F,CAAkGC,GAAD,IAAO;AAC5GC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAFK,EAEHK,KAFG,CAEIzB,KAAD,IAAS;AAChBqB,IAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACD,GAJK,CAAN;AAMH,CATM","sourcesContent":["import axios from 'axios'\n// import { MyfxbookApi } from 'myfxbook-api-client';\nimport * as calc from './functionz'\n\n\n    //state actions\n\n    export const stateError = error => ({\n      type:'STATE_HAS_ERROR',\n      error\n    })\n    //Auth Actions\n    export const registerStart = () => ({\n      type: 'REGISTER_START',\n    })\n    \n    export const registerFinished = (user,token,usertype) => ({\n      type: 'REGISTER_FINISHED',\n      user,\n      token,\n      usertype\n    })\n\n    export const registerError = error => ({\n      type:'REGISTER_ERROR',\n      error\n    })\n\n    export const forexstart=()=>({\n      type:'FETCH_START',\n\n    })\n\n    export const forexfinished=(rates)=>({\n      type:'FETCH_END',\n      rates\n    })\n\n    export const forexerr=(error)=>({\n      type:'FETCH_ERROR',\n      error\n    })\n  \n   export const registerClientUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n\n      \n      \n      await axios.post('https://api.sortika.com/client/register',\n      {\n        username:username,\n        email:email,\n        password:pass\n      })\n      .then( async(res)=>{ \n             \n        console.log(res.data)\n           await  dispatch(registerFinished(res.data.user,res.data.access_token,'client'))\n          })\n          \n  .catch ((error) =>{\n    \n    console.log(error);\n    dispatch(registerError(error))\n \n    \n  })\n    }\n   export const registerTraderUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n        let myfxprofile;\n\n        await axios.post('https://api.sortika.com/trader/myfx/',\n      { \n        email:email,\n        password:pass\n      }).then(async(res)=>{\n          console.log(res)\n          switch (res.data.status){\n\n            case 419 :\n              dispatch(stateError(res.data.info))\n              break\n\n              case 417:\n                dispatch(stateError(res.data.info))\n                break\n                case 200:\n                  //calculate win ratio\n                    let win_ratio=await calc.calculateWin(res.data.history)\n                    let loss_ratio=await calc.calculateloss(res.data.history)\n                    let avgprofit =await calc.calc_profitfactor(res.data.acc)\n\n                // console.log(win_ratio+ ' '+loss_ratio+' '+avgprofit)\n                  //calculate profit ratio\n                  //calculate profit factor\n\n                  await axios.post('https://api.sortika.com/trader/register',\n            {\n              username:username,\n              email:email,\n              password:pass,\n              win_ratio:win_ratio,\n              loss_ratio:loss_ratio,\n              profit_factor:avgprofit\n\n            }).then( async(res)=>{ \n                  \n                      console.log(res.data)\n                        await  dispatch(registerFinished(res.data.user,res.data.access_token,'trader'))\n                        })\n                        \n                .catch ((error) =>{\n                  \n                  console.log(error);\n                  dispatch(registerError(error))\n              \n                  \n                })\n\n                  break\n              default:\n                dispatch(stateError('Server not available'))\n          }\n         \n        }).catch((error) =>{\n          dispatch(stateError(error.message))\n          console.log(error)\n        })\n       \n\n \n      \n    }\n\n\n    export const loginStart = () => ({\n        type: 'LOGIN_START',\n      })\n      \n      export const loginFinished = (user,token,usertype) => ({\n        type: 'LOGIN_FINISHED',\n        user,\n        token,\n        usertype\n      })\n      \n      export const loginError = error => ({\n        type:'LOGIN_ERROR',\n        error\n      })\n      export const loginClientUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('client ..............')\n\n        await axios.post('https://api.sortika.com/client/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token,'client'))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n      export const loginTraderUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('trader ..............')\n        await axios.post('https://api.sortika.com/trader/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token,'trader'))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n\n      export const logoutStart = () => ({\n        type: 'LOGOUT_START'\n      })\n      \n     export const logoutFinished = () => ({\n        type: 'LOGOUT_FINISHED'\n      })\n      \n      export const logoutError = error => ({\n        type: 'LOGOUT_ERROR',\n        error\n      })\n\n  export const logoutClientUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/client/logout?token='+token)\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }\n  export const logoutTraderUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/trader/logout?token='+token)\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }\n\n    export const getForex=()=>async(dispatch)=>{\n      dispatch(forexstart())\n\n        await axios.get('https://www.freeforexapi.com/api/live?pairs=EURGBP,USDJPY,USDCAD,USDEUR,USDNZD').then((res)=>{\n          console.log(res)\n        }).catch((error)=>{\n          console.log(error)\n        })\n\n    }"]},"metadata":{},"sourceType":"module"}