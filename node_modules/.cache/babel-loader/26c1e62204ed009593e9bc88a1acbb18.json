{"ast":null,"code":"import { combineReducers } from 'redux'; // import update from 'immutability-helper'\n\nconst AuthinitialState = {\n  loggedIn: false,\n  token: null,\n  isFetching: false,\n  hasError: false,\n  errorMessage: '',\n  successMessage: '',\n  user: null,\n  usertype: '',\n  acc_balance: 0.00\n};\nconst initialstate = {\n  isFetching: false,\n  hasError: false,\n  errorMessage: '',\n  responseMessage: '',\n  type: ''\n};\nconst forexinitial = {\n  isFetching: false,\n  hasError: false,\n  errorMessage: '',\n  rates: null\n};\n\nconst stateReducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case 'STATE_FETCHING':\n      return { ...state,\n        isFetching: true\n      };\n\n    case 'STATE_NOT_FETCHING':\n      return { ...state,\n        isFetching: false\n      };\n\n    case 'STATE_HAS_ERROR':\n      const {\n        error\n      } = action;\n      return { ...state,\n        isFetching: false,\n        hasError: true,\n        errorMessage: error\n      };\n\n    case 'STATE_SUCCESSFUL':\n      const {\n        message\n      } = action;\n      return { ...state,\n        isFetching: false,\n        responseMessage: message\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Forex = (state = forexinitial, action) => {\n  switch (action.type) {\n    case 'FETCH_START':\n      return { ...state,\n        isFetching: true\n      };\n\n    case 'FETCH_END':\n      const {\n        rates\n      } = action;\n      return { ...state,\n        isFetching: false,\n        hasError: false,\n        rates\n      };\n\n    case 'FETCH_ERROR':\n      const {\n        error\n      } = action;\n      return { ...state,\n        isFetching: false,\n        hasError: true,\n        rates: null,\n        errorMessage: error\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Auth = (state = AuthinitialState, action) => {\n  switch (action.type) {\n    case 'LOGIN_START':\n      {\n        return { ...state,\n          isFetching: true\n        };\n      }\n\n    case 'LOGIN_FINISHED':\n      {\n        const {\n          user,\n          token,\n          usertype\n        } = action;\n        return { ...state,\n          user,\n          token,\n          usertype: usertype,\n          loggedIn: true,\n          isFetching: false\n        };\n      }\n\n    case 'LOGIN_ERROR':\n      {\n        const {\n          error\n        } = action;\n        return { ...state,\n          isFetching: false,\n          loggedIn: false,\n          hasError: true,\n          token: null,\n          user: null,\n          errorMessage: error\n        };\n      }\n\n    case 'LOGOUT_START':\n      {\n        return { ...state,\n          isFetching: true\n        };\n      }\n\n    case 'LOGOUT_FINISHED':\n      {\n        return { ...state,\n          loggedIn: false,\n          isFetching: false,\n          hasError: false,\n          errorMessage: '',\n          token: null,\n          user: null\n        };\n      }\n\n    case 'LOGOUT_ERROR':\n      {\n        const {\n          error\n        } = action;\n        return { ...state,\n          isFetching: false,\n          loggedIn: true,\n          hasError: true,\n          errorMessage: error\n        };\n      }\n\n    case 'REGISTER_START':\n      {\n        return { ...state,\n          isFetching: true\n        };\n      }\n\n    case 'REGISTER_CLIENT_FINISHED':\n      {\n        const {\n          message\n        } = action;\n        return { ...state,\n          isFetching: false,\n          successMessage: message\n        };\n      }\n\n    case 'REGISTER_TRADER_FINISHED':\n      {\n        const {\n          user,\n          token\n        } = action;\n        return { ...state,\n          user,\n          token,\n          loggedIn: true,\n          isFetching: false\n        };\n      }\n\n    case 'REGISTER_ERROR':\n      {\n        const {\n          error\n        } = action;\n        return { ...state,\n          isFetching: false,\n          loggedIn: false,\n          hasError: true,\n          token: null,\n          user: null,\n          errorMessage: error\n        };\n      }\n\n    case 'FETCH_BALANCE':\n      {\n        const {\n          amount\n        } = action;\n        let curr_amount = { ...state.acc_balance\n        };\n        return { ...state,\n          acc_balance: curr_amount + amount\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nconst Rootreducer = combineReducers({\n  stateReducer,\n  Auth,\n  Forex\n});\nexport default Rootreducer;","map":{"version":3,"sources":["/home/nathy/React_Apps/demo_1/src/pages/redux/Reducer.js"],"names":["combineReducers","AuthinitialState","loggedIn","token","isFetching","hasError","errorMessage","successMessage","user","usertype","acc_balance","initialstate","responseMessage","type","forexinitial","rates","stateReducer","state","action","error","message","Forex","Auth","amount","curr_amount","Rootreducer"],"mappings":"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","sourcesContent":["import {combineReducers} from 'redux'\n// import update from 'immutability-helper'\n\nconst AuthinitialState = {\n    loggedIn: false,\n    token:null,\n    isFetching:false,\n    hasError: false,\n    errorMessage: '',\n    successMessage:'',\n    user: null,\n    usertype:'',\n    acc_balance:0.00\n  }\n\nconst initialstate={\n  isFetching:false,\n  hasError:false,\n  errorMessage:'',\n  responseMessage:'',\n  type:''\n\n}\n\nconst forexinitial={\n  isFetching:false,\n  hasError:false,\n  errorMessage:'',\n  rates:null\n}\n\nconst stateReducer=(state=initialstate,action)=>{\n   switch(action.type){\n     case 'STATE_FETCHING':\n       return{\n         ...state,isFetching:true\n       }\n       case 'STATE_NOT_FETCHING':\n         return {\n           ...state,\n           isFetching:false\n         }\n         case 'STATE_HAS_ERROR':\n            const { error } = action\n            return{\n              ...state,isFetching:false,hasError:true,errorMessage:error\n            }\n\n            case 'STATE_SUCCESSFUL':\n              const {message} =action\n              return {\n                ...state,\n                isFetching:false,\n                responseMessage:message,\n                \n              }\n\n            default: \n            return state\n            \n      \n   }\n}\n\nconst Forex=(state=forexinitial,action)=>{\n    switch(action.type) \n    {\n      case 'FETCH_START':\n          return{\n              ...state,isFetching:true\n            }\n        \n      case 'FETCH_END':\n        const{rates}=action\n        return {\n          ...state,\n          isFetching: false,\n          hasError: false,\n          rates\n        }\n      \n      case 'FETCH_ERROR':\n        const {error}=action\n        return {\n          ...state,\n          isFetching: false,\n          hasError: true,\n          rates:null,\n          errorMessage: error\n        }\n        \n        default: \n        return state\n        \n\n    }\n\n}\n\n\nconst Auth=(state=AuthinitialState,action)=>{\n    switch(action.type)\n    {\n        case 'LOGIN_START': {\n            return {\n              ...state,\n              isFetching: true\n            };\n          }\n          case 'LOGIN_FINISHED': {\n            const { user,token,usertype} = action\n            return {\n              ...state,\n              user,\n              token,\n              usertype:usertype,\n              loggedIn: true,\n              isFetching: false\n            };\n          }\n          case 'LOGIN_ERROR': {\n            const { error } = action\n            return {\n              ...state,\n              isFetching: false,\n              loggedIn: false,\n              hasError: true,\n              token:null,\n              user: null,\n              errorMessage: error\n            };\n          }\n          case 'LOGOUT_START': {\n            return {\n              ...state,\n              isFetching: true\n            }\n          }\n          case 'LOGOUT_FINISHED': {\n            return {\n              ...state,\n              loggedIn: false,\n              isFetching: false,\n              hasError: false,\n              errorMessage: '',\n              token:null,\n              user: null\n            }\n          }\n          case 'LOGOUT_ERROR': {\n            const { error } = action\n            return {\n              ...state,\n              isFetching: false,\n              loggedIn:true,\n              hasError: true,\n              errorMessage: error,\n              \n            }\n          }\n          case 'REGISTER_START': {\n            return {\n              ...state,\n              isFetching: true\n            };\n          }\n\n          case 'REGISTER_CLIENT_FINISHED':{\n\n            const {message}=action\n            return{\n              ...state,\n              isFetching:false,\n              successMessage:message\n            }\n          }\n          case 'REGISTER_TRADER_FINISHED': {\n            const { user,token} = action\n            return {\n              ...state,\n              user,\n              token,\n              loggedIn: true,\n              isFetching: false\n            };\n          }\n          case 'REGISTER_ERROR': {\n            const { error } = action\n            return {\n              ...state,\n              isFetching: false,\n              loggedIn: false,\n              hasError: true,\n              token:null,\n              user: null,\n              errorMessage: error\n            };\n          }\n\n          case 'FETCH_BALANCE':{\n            const {amount}=action\n            let curr_amount={...state.acc_balance}\n            return {\n              ...state,\n              acc_balance:curr_amount+amount\n            }\n          }\n          \n         \n          default: {\n            return state\n          }\n    \n    }\n}\n\nconst Rootreducer= combineReducers({\n  stateReducer,\n \n      Auth,\n\n      Forex\n\n})\n\nexport default Rootreducer"]},"metadata":{},"sourceType":"module"}