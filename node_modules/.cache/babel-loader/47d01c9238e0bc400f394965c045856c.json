{"ast":null,"code":"import axios from 'axios'; // import { MyfxbookApi } from 'myfxbook-api-client';\n\nimport * as calc from './functionz'; //state actions\n\nexport const stateError = error => ({\n  type: 'STATE_HAS_ERROR',\n  error\n}); //Auth Actions\n\nexport const registerStart = () => ({\n  type: 'REGISTER_START'\n});\nexport const registerFinished = (user, token, usertype) => ({\n  type: 'REGISTER_FINISHED',\n  user,\n  token,\n  usertype\n});\nexport const registerError = error => ({\n  type: 'REGISTER_ERROR',\n  error\n});\nexport const registerClientUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  await axios.post('https://api.sortika.com/client/register', {\n    username: username,\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(registerFinished(res.data.user, res.data.access_token, 'client'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(registerError(error));\n  });\n};\nexport const registerTraderUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  let myfxprofile;\n  await axios.post('https://api.sortika.com/trader/myfx/', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res);\n\n    switch (res.data.status) {\n      case 419:\n        dispatch(stateError(res.data.info));\n        break;\n\n      case 417:\n        dispatch(stateError(res.data.info));\n        break;\n\n      case 200:\n        //calculate win ratio\n        let win_ratio = calc.calculateWin(res.data.history);\n        let loss_ratio = calc.calculateloss(res.data.history);\n        let avgprofit = calc.calc_profitfactor(res.data.acc);\n        console.log(win_ratio + ' ' + loss_ratio + ' ' + avgprofit); //calculate profit ratio\n        //calculate profit factor\n\n        break;\n\n      default:\n        dispatch(stateError('Server not available'));\n    }\n  }).catch(error => {\n    console.log(error);\n  }); //   if(!myfxerror){\n  //       await axios.post('https://api.sortika.com/trader/register',\n  //       {\n  //         username:username,\n  //         email:email,\n  //         password:pass\n  //         // profile:myfxprofile\n  //       })\n  //       .then( async(res)=>{ \n  //         console.log(res.data)\n  //           await  dispatch(registerFinished(res.data.user,res.data.access_token,'trader'))\n  //           })\n  //   .catch ((error) =>{\n  //     console.log(error);\n  //     dispatch(registerError(error))\n  //   })\n  // }\n  // else {\n  //   await dispatch(stateError('No Account with given credentials was found in MyFxBook'))\n  // }\n};\nexport const loginStart = () => ({\n  type: 'LOGIN_START'\n});\nexport const loginFinished = (user, token, usertype) => ({\n  type: 'LOGIN_FINISHED',\n  user,\n  token,\n  usertype\n});\nexport const loginError = error => ({\n  type: 'LOGIN_ERROR',\n  error\n});\nexport const loginClientUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('client ..............');\n  await axios.post('https://api.sortika.com/client/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token, 'client'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const loginTraderUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('trader ..............');\n  await axios.post('https://api.sortika.com/trader/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token, 'trader'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const logoutStart = () => ({\n  type: 'LOGOUT_START'\n});\nexport const logoutFinished = () => ({\n  type: 'LOGOUT_FINISHED'\n});\nexport const logoutError = error => ({\n  type: 'LOGOUT_ERROR',\n  error\n});\nexport const logoutClientUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/client/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};\nexport const logoutTraderUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/trader/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};","map":{"version":3,"sources":["/home/nathy/React_Apps/demo_1/src/pages/redux/Action.js"],"names":["axios","calc","stateError","error","type","registerStart","registerFinished","user","token","usertype","registerError","registerClientUser","username","email","pass","dispatch","post","password","then","res","console","log","data","access_token","catch","registerTraderUser","myfxprofile","status","info","win_ratio","calculateWin","history","loss_ratio","calculateloss","avgprofit","calc_profitfactor","acc","loginStart","loginFinished","loginError","loginClientUser","loginTraderUser","logoutStart","logoutFinished","logoutError","logoutClientUser","logoutTraderUser"],"mappings":"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","sourcesContent":["import axios from 'axios'\n// import { MyfxbookApi } from 'myfxbook-api-client';\nimport * as calc from './functionz'\n\n\n    //state actions\n\n    export const stateError = error => ({\n      type:'STATE_HAS_ERROR',\n      error\n    })\n    //Auth Actions\n    export const registerStart = () => ({\n      type: 'REGISTER_START',\n    })\n    \n    export const registerFinished = (user,token,usertype) => ({\n      type: 'REGISTER_FINISHED',\n      user,\n      token,\n      usertype\n    })\n    \n    export const registerError = error => ({\n      type:'REGISTER_ERROR',\n      error\n    })\n   export const registerClientUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n\n      \n      \n      await axios.post('https://api.sortika.com/client/register',\n      {\n        username:username,\n        email:email,\n        password:pass\n      })\n      .then( async(res)=>{ \n             \n        console.log(res.data)\n           await  dispatch(registerFinished(res.data.user,res.data.access_token,'client'))\n          })\n          \n  .catch ((error) =>{\n    \n    console.log(error);\n    dispatch(registerError(error))\n \n    \n  })\n    }\n   export const registerTraderUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n        let myfxprofile;\n\n        await axios.post('https://api.sortika.com/trader/myfx/',\n      { \n        email:email,\n        password:pass\n      }).then(async(res)=>{\n          console.log(res)\n          switch (res.data.status){\n\n            case 419 :\n              dispatch(stateError(res.data.info))\n              break\n\n              case 417:\n                dispatch(stateError(res.data.info))\n                break\n                case 200:\n                  //calculate win ratio\n                    let win_ratio=calc.calculateWin(res.data.history)\n                    let loss_ratio=calc.calculateloss(res.data.history)\n                    let avgprofit =calc.calc_profitfactor(res.data.acc)\n\n                console.log(win_ratio+ ' '+loss_ratio+' '+avgprofit)\n                  //calculate profit ratio\n                  //calculate profit factor\n\n                  break\n              default:\n                dispatch(stateError('Server not available'))\n          }\n         \n        }).catch((error) =>{\n          console.log(error)\n        })\n       \n\n \n      //   if(!myfxerror){\n\n          \n      //       await axios.post('https://api.sortika.com/trader/register',\n      //       {\n      //         username:username,\n      //         email:email,\n      //         password:pass\n      //         // profile:myfxprofile\n      //       })\n      //       .then( async(res)=>{ \n                  \n      //         console.log(res.data)\n      //           await  dispatch(registerFinished(res.data.user,res.data.access_token,'trader'))\n      //           })\n                \n      //   .catch ((error) =>{\n          \n      //     console.log(error);\n      //     dispatch(registerError(error))\n      \n          \n      //   })\n      // }\n      // else {\n      //   await dispatch(stateError('No Account with given credentials was found in MyFxBook'))\n      // }\n    }\n\n\n    export const loginStart = () => ({\n        type: 'LOGIN_START',\n      })\n      \n      export const loginFinished = (user,token,usertype) => ({\n        type: 'LOGIN_FINISHED',\n        user,\n        token,\n        usertype\n      })\n      \n      export const loginError = error => ({\n        type:'LOGIN_ERROR',\n        error\n      })\n      export const loginClientUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('client ..............')\n\n        await axios.post('https://api.sortika.com/client/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token,'client'))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n      export const loginTraderUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('trader ..............')\n        await axios.post('https://api.sortika.com/trader/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token,'trader'))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n\n      export const logoutStart = () => ({\n        type: 'LOGOUT_START'\n      })\n      \n     export const logoutFinished = () => ({\n        type: 'LOGOUT_FINISHED'\n      })\n      \n      export const logoutError = error => ({\n        type: 'LOGOUT_ERROR',\n        error\n      })\n\n  export const logoutClientUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/client/logout?token='+token)\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }\n  export const logoutTraderUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/trader/logout?token='+token)\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }"]},"metadata":{},"sourceType":"module"}