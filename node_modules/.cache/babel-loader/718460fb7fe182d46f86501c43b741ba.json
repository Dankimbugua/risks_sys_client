{"ast":null,"code":"import axios from 'axios'; // import { MyfxbookApi } from 'myfxbook-api-client';\n//Auth Actions\n\nexport const registerStart = () => ({\n  type: 'REGISTER_START'\n});\nexport const registerFinished = (user, token) => ({\n  type: 'REGISTER_FINISHED',\n  user,\n  token\n});\nexport const registerError = error => ({\n  type: 'REGISTER_ERROR',\n  error\n});\nexport const registerClientUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  await axios.post('https://api.sortika.com/client/register', {\n    username: username,\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(registerFinished(res.data.user, res.data.access_token));\n  }).catch(error => {\n    console.log(error);\n    dispatch(registerError(error));\n  });\n};\nexport const registerTraderUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  let myfxerror;\n  await axios.post('https://api.sortika.com/trader/myfx', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    myfxerror = res.data.error;\n  }).catch(error => {\n    console.log(error);\n  });\n\n  if (!myfxerror) {\n    await axios.post('https://api.sortika.com/trader/register', {\n      username: username,\n      email: email,\n      password: pass\n    }).then(async res => {\n      console.log(res.data);\n      await dispatch(registerFinished(res.data.user, res.data.access_token));\n    }).catch(error => {\n      console.log(error);\n      dispatch(registerError(error));\n    });\n  }\n};\nexport const loginStart = () => ({\n  type: 'LOGIN_START'\n});\nexport const loginFinished = (user, token) => ({\n  type: 'LOGIN_FINISHED',\n  user,\n  token\n});\nexport const loginError = error => ({\n  type: 'LOGIN_ERROR',\n  error\n});\nexport const loginClientUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  await axios.post('https://api.sortika.com/client/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const loginTraderUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  await axios.post('https://api.sortika.com/trader/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const logoutStart = () => ({\n  type: 'LOGOUT_START'\n});\nexport const logoutFinished = () => ({\n  type: 'LOGOUT_FINISHED'\n});\nexport const logoutError = error => ({\n  type: 'LOGOUT_ERROR',\n  error\n});\nexport const logoutUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/client/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};","map":{"version":3,"sources":["/home/nathy/React_Apps/demo_1/src/pages/redux/Action.js"],"names":["axios","registerStart","type","registerFinished","user","token","registerError","error","registerClientUser","username","email","pass","dispatch","post","password","then","res","console","log","data","access_token","catch","registerTraderUser","myfxerror","loginStart","loginFinished","loginError","loginClientUser","loginTraderUser","logoutStart","logoutFinished","logoutError","logoutUser"],"mappings":"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","sourcesContent":["import axios from 'axios'\n// import { MyfxbookApi } from 'myfxbook-api-client';\n\n    //Auth Actions\n    export const registerStart = () => ({\n      type: 'REGISTER_START',\n    })\n    \n    export const registerFinished = (user,token) => ({\n      type: 'REGISTER_FINISHED',\n      user,\n      token\n    })\n    \n    export const registerError = error => ({\n      type:'REGISTER_ERROR',\n      error\n    })\n   export const registerClientUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n\n      \n      \n      await axios.post('https://api.sortika.com/client/register',\n      {\n        username:username,\n        email:email,\n        password:pass\n      })\n      .then( async(res)=>{ \n             \n        console.log(res.data)\n           await  dispatch(registerFinished(res.data.user,res.data.access_token))\n          })\n          \n  .catch ((error) =>{\n    \n    console.log(error);\n    dispatch(registerError(error))\n \n    \n  })\n    }\n   export const registerTraderUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n      let myfxerror;\n        \n\n        await axios.post('https://api.sortika.com/trader/myfx',\n      { \n        email:email,\n        password:pass\n      }).then(async(res)=>{\n           console.log(res.data)\n           myfxerror=res.data.error\n        }).catch((error) =>{\n          console.log(error)\n        })\n       \n\n \n        if(!myfxerror){\n            await axios.post('https://api.sortika.com/trader/register',\n            {\n              username:username,\n              email:email,\n              password:pass\n            })\n            .then( async(res)=>{ \n                  \n              console.log(res.data)\n                await  dispatch(registerFinished(res.data.user,res.data.access_token))\n                })\n                \n        .catch ((error) =>{\n          \n          console.log(error);\n          dispatch(registerError(error))\n      \n          \n        })\n      }\n    }\n    export const loginStart = () => ({\n        type: 'LOGIN_START',\n      })\n      \n      export const loginFinished = (user,token) => ({\n        type: 'LOGIN_FINISHED',\n        user,\n        token\n      })\n      \n      export const loginError = error => ({\n        type:'LOGIN_ERROR',\n        error\n      })\n      export const loginClientUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        \n        await axios.post('https://api.sortika.com/client/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n      export const loginTraderUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        \n        await axios.post('https://api.sortika.com/trader/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n\n      export const logoutStart = () => ({\n        type: 'LOGOUT_START'\n      })\n      \n     export const logoutFinished = () => ({\n        type: 'LOGOUT_FINISHED'\n      })\n      \n      export const logoutError = error => ({\n        type: 'LOGOUT_ERROR',\n        error\n      })\n\n  export const logoutUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/client/logout?token='+token)\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }"]},"metadata":{},"sourceType":"module"}