{"ast":null,"code":"import axios from 'axios'; // import { MyfxbookApi } from 'myfxbook-api-client';\n\nimport * as calc from './functionz'; //state actions\n\nexport const stateError = error => ({\n  type: 'STATE_HAS_ERROR',\n  error\n});\nexport const not_fetching = () => ({\n  type: 'STATE_NOT_FETCHING'\n});\nexport const state_fetching = () => ({\n  type: 'STATE_FETCHING'\n});\nexport const state_fetch_error = error => ({\n  type: 'STATE_HAS_ERROR',\n  error\n}); //Auth Actions\n\nexport const registerStart = () => ({\n  type: 'REGISTER_START'\n});\nexport const registerFinished = (user, token, usertype) => ({\n  type: 'REGISTER_FINISHED',\n  user,\n  token,\n  usertype\n});\nexport const registerError = error => ({\n  type: 'REGISTER_ERROR',\n  error\n});\nexport const forexstart = () => ({\n  type: 'FETCH_START'\n});\nexport const forexfinished = rates => ({\n  type: 'FETCH_END',\n  rates\n});\nexport const forexerr = error => ({\n  type: 'FETCH_ERROR',\n  error\n});\nexport const registerClientUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  await axios.post('https://api.sortika.com/client/register', {\n    username: username,\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(registerFinished(res.data.user, res.data.access_token, 'client'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(registerError(error));\n  });\n};\nexport const registerTraderUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  let myfxprofile;\n  await axios.post('https://api.sortika.com/trader/myfx/', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res);\n\n    switch (res.data.status) {\n      case 419:\n        dispatch(stateError(res.data.info));\n        break;\n\n      case 417:\n        dispatch(stateError(res.data.info));\n        break;\n\n      case 200:\n        //calculate win ratio\n        let win_ratio = await calc.calculateWin(res.data.history);\n        let loss_ratio = await calc.calculateloss(res.data.history);\n        let avgprofit = await calc.calc_profitfactor(res.data.acc); // console.log(win_ratio+ ' '+loss_ratio+' '+avgprofit)\n        //calculate profit ratio\n        //calculate profit factor\n\n        await axios.post('https://api.sortika.com/trader/register', {\n          username: username,\n          email: email,\n          password: pass,\n          win_ratio: win_ratio,\n          loss_ratio: loss_ratio,\n          profit_factor: avgprofit\n        }).then(async res => {\n          console.log(res.data);\n          await dispatch(registerFinished(res.data.user, res.data.access_token, 'trader'));\n        }).catch(error => {\n          console.log(error);\n          dispatch(registerError(error));\n        });\n        break;\n\n      default:\n        dispatch(stateError('Server not available'));\n    }\n  }).catch(error => {\n    dispatch(stateError(error.message));\n    console.log(error);\n  });\n};\nexport const loginStart = () => ({\n  type: 'LOGIN_START'\n});\nexport const loginFinished = (user, token, usertype) => ({\n  type: 'LOGIN_FINISHED',\n  user,\n  token,\n  usertype\n});\nexport const loginError = error => ({\n  type: 'LOGIN_ERROR',\n  error\n});\nexport const loginClientUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('client ..............');\n  await axios.post('https://api.sortika.com/client/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token, 'client'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const loginTraderUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('trader ..............');\n  await axios.post('https://api.sortika.com/trader/login', // {\n  //   headers:{\n  //     'Access-Control-Allow-Origin': '*',\n  //     'Content-Type': 'application/json',\n  //   }\n  // },\n  {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token, 'trader'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const logoutStart = () => ({\n  type: 'LOGOUT_START'\n});\nexport const logoutFinished = () => ({\n  type: 'LOGOUT_FINISHED'\n});\nexport const logoutError = error => ({\n  type: 'LOGOUT_ERROR',\n  error\n});\nexport const logoutClientUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/client/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};\nexport const logoutTraderUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/trader/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};\nexport const getForex = () => async dispatch => {\n  dispatch(forexstart());\n  await axios.get('https://www.freeforexapi.com/api/live?pairs=EURGBP,USDJPY,USDCAD,USDEUR,NZDUSD,USDCHF,AUDUSD', {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    console.log(res.data.rates);\n    dispatch(forexfinished(res.data.rates));\n  }).catch(error => {\n    console.log(error);\n    dispatch(forexerr(error));\n  });\n}; ///Client Mpesa\n\nexport const clientbalance = amount => ({\n  type: 'FETCH_BALANCE',\n  amount\n});\nexport const clientDepositMpesa = (phone, amount) => async dispatch => {\n  // dispatch(state_fetching())\n  await axios.post('https://api.sortika.com/client/payment/test', {\n    phone: phone,\n    amount: amount\n  }).then(async res => {\n    console.log(res);\n    let mID = res.data.MerchantRequestID;\n    await axios.post('https://api.sortika.com/client/payment/query', {\n      id: mID\n    }).then(res => {\n      console.log(res);\n      dispatch(clientbalance(res.data.info[0].Amount_paid));\n    }).catch(error => console.log(error)); // if(res.ResponseCode==0){\n    // let mID=res.MerchantRequestID\n    // }\n  }).catch(error => {\n    console.log(error);\n  });\n};","map":{"version":3,"sources":["/home/nathy/React_Apps/demo_1/src/pages/redux/Action.js"],"names":["axios","calc","stateError","error","type","not_fetching","state_fetching","state_fetch_error","registerStart","registerFinished","user","token","usertype","registerError","forexstart","forexfinished","rates","forexerr","registerClientUser","username","email","pass","dispatch","post","password","then","res","console","log","data","access_token","catch","registerTraderUser","myfxprofile","status","info","win_ratio","calculateWin","history","loss_ratio","calculateloss","avgprofit","calc_profitfactor","acc","profit_factor","message","loginStart","loginFinished","loginError","loginClientUser","loginTraderUser","logoutStart","logoutFinished","logoutError","logoutClientUser","logoutTraderUser","getForex","get","headers","clientbalance","amount","clientDepositMpesa","phone","mID","MerchantRequestID","id","Amount_paid"],"mappings":"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","sourcesContent":["import axios from 'axios'\n// import { MyfxbookApi } from 'myfxbook-api-client';\nimport * as calc from './functionz'\n\n\n    //state actions\n\n    export const stateError = error => ({\n      type:'STATE_HAS_ERROR',\n      error\n    })\n\n    export const not_fetching=()=>({\n      type:'STATE_NOT_FETCHING'\n    })\n    export const state_fetching=()=>({\n      type:'STATE_FETCHING'\n    })\n    \n      export const state_fetch_error= error =>({\n        type:'STATE_HAS_ERROR',\n        error\n      })  \n\n\n    //Auth Actions\n    export const registerStart = () => ({\n      type: 'REGISTER_START',\n    })\n    \n    export const registerFinished = (user,token,usertype) => ({\n      type: 'REGISTER_FINISHED',\n      user,\n      token,\n      usertype\n    })\n\n    export const registerError = error => ({\n      type:'REGISTER_ERROR',\n      error\n    })\n\n    export const forexstart=()=>({\n      type:'FETCH_START',\n\n    })\n\n    export const forexfinished=(rates)=>({\n      type:'FETCH_END',\n      rates\n    })\n\n    export const forexerr=(error)=>({\n      type:'FETCH_ERROR',\n      error\n    })\n  \n   export const registerClientUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n\n      \n      \n      await axios.post('https://api.sortika.com/client/register',\n      {\n        username:username,\n        email:email,\n        password:pass\n      })\n      .then( async(res)=>{ \n             \n        console.log(res.data)\n           await  dispatch(registerFinished(res.data.user,res.data.access_token,'client'))\n          })\n          \n  .catch ((error) =>{\n    \n    console.log(error);\n    dispatch(registerError(error))\n \n    \n  })\n    }\n   export const registerTraderUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n        let myfxprofile;\n\n        await axios.post('https://api.sortika.com/trader/myfx/',\n      { \n        email:email,\n        password:pass\n      }).then(async(res)=>{\n          console.log(res)\n          switch (res.data.status){\n\n            case 419 :\n              dispatch(stateError(res.data.info))\n              break\n\n              case 417:\n                dispatch(stateError(res.data.info))\n                break\n                case 200:\n                  //calculate win ratio\n                    let win_ratio=await calc.calculateWin(res.data.history)\n                    let loss_ratio=await calc.calculateloss(res.data.history)\n                    let avgprofit =await calc.calc_profitfactor(res.data.acc)\n\n                // console.log(win_ratio+ ' '+loss_ratio+' '+avgprofit)\n                  //calculate profit ratio\n                  //calculate profit factor\n\n                  await axios.post('https://api.sortika.com/trader/register',\n            {\n              username:username,\n              email:email,\n              password:pass,\n              win_ratio:win_ratio,\n              loss_ratio:loss_ratio,\n              profit_factor:avgprofit\n\n            }).then( async(res)=>{ \n                  \n                      console.log(res.data)\n                        await  dispatch(registerFinished(res.data.user,res.data.access_token,'trader'))\n                        })\n                        \n                .catch ((error) =>{\n                  \n                  console.log(error);\n                  dispatch(registerError(error))\n              \n                  \n                })\n\n                  break\n              default:\n                dispatch(stateError('Server not available'))\n          }\n         \n        }).catch((error) =>{\n          dispatch(stateError(error.message))\n          console.log(error)\n        })\n       \n\n \n      \n    }\n\n\n    export const loginStart = () => ({\n        type: 'LOGIN_START',\n      })\n      \n      export const loginFinished = (user,token,usertype) => ({\n        type: 'LOGIN_FINISHED',\n        user,\n        token,\n        usertype\n      })\n      \n      export const loginError = error => ({\n        type:'LOGIN_ERROR',\n        error\n      })\n      export const loginClientUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('client ..............')\n\n        await axios.post('https://api.sortika.com/client/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token,'client'))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n      export const loginTraderUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('trader ..............')\n        await axios.post('https://api.sortika.com/trader/login',\n\n        // {\n        //   headers:{\n        //     'Access-Control-Allow-Origin': '*',\n        //     'Content-Type': 'application/json',\n        //   }\n        // },\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token,'trader'))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n\n      export const logoutStart = () => ({\n        type: 'LOGOUT_START'\n      })\n      \n     export const logoutFinished = () => ({\n        type: 'LOGOUT_FINISHED'\n      })\n      \n      export const logoutError = error => ({\n        type: 'LOGOUT_ERROR',\n        error\n      })\n\n  export const logoutClientUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/client/logout?token='+token)\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }\n  export const logoutTraderUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/trader/logout?token='+token,\n    \n    )\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }\n\n    export const getForex=()=>async(dispatch)=>{\n      dispatch(forexstart())\n\n        await axios.get('https://www.freeforexapi.com/api/live?pairs=EURGBP,USDJPY,USDCAD,USDEUR,NZDUSD,USDCHF,AUDUSD',\n        {\n        headers:{\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json',\n        }\n      }\n        ).then((res)=>{\n          console.log(res.data.rates)\n          dispatch(forexfinished(res.data.rates))\n        }).catch((error)=>{\n          console.log(error)\n          dispatch(forexerr(error))\n        })\n\n    }\n\n    ///Client Mpesa\n    export const clientbalance= amount=>({\n\n        type:'FETCH_BALANCE',\n        amount\n    })\n\n    export const clientDepositMpesa=(phone,amount)=>async(dispatch)=>{\n      // dispatch(state_fetching())\n      await axios.post('https://api.sortika.com/client/payment/test',{\n        phone:phone,\n        amount:amount\n      }).then( async (res)=>{\n\n        console.log(res)\n        let mID=res.data.MerchantRequestID\n\n          await axios.post('https://api.sortika.com/client/payment/query',{\n            id:mID\n          }).then((res)=>{\n            console.log(res)\n            dispatch(clientbalance(res.data.info[0].Amount_paid))\n          }).catch(error=>console.log(error))\n\n          // if(res.ResponseCode==0){\n        // let mID=res.MerchantRequestID\n          // }\n      }).catch((error)=>{\n        console.log(error)\n      })\n    }"]},"metadata":{},"sourceType":"module"}