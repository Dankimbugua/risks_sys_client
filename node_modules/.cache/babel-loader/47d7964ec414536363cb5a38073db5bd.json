{"ast":null,"code":"import axios from 'axios'; // import { MyfxbookApi } from 'myfxbook-api-client';\n\nimport * as calc from './functionz'; //state actions\n\nexport const stateError = error => ({\n  type: 'STATE_HAS_ERROR',\n  error\n});\nexport const not_fetching = () => ({\n  type: 'STATE_NOT_FETCHING'\n});\nexport const state_fetching = () => ({\n  type: 'STATE_FETCHING'\n});\nexport const state_success = message => ({\n  type: 'STATE_SUCCESSFUL',\n  message\n});\nexport const state_fetch_error = error => ({\n  type: 'STATE_HAS_ERROR',\n  error\n}); //Auth Actions\n\nexport const registerStart = () => ({\n  type: 'REGISTER_START'\n});\nexport const registerClientFinished = message => ({\n  type: 'REGISTER_CLIENT_FINISHED',\n  message\n});\nexport const registertraderFinished = (user, token, type) => ({\n  type: 'REGISTER_TRADER_FINISHED',\n  user,\n  token,\n  type\n});\nexport const registerError = error => ({\n  type: 'REGISTER_ERROR',\n  error\n});\nexport const assetstart = () => ({\n  type: 'FETCH_ASSETS_START'\n});\nexport const assetfinished = assets => ({\n  type: 'FETCH_ASSETS_END',\n  assets\n});\nexport const assets_err = error => ({\n  type: 'FETCH_ASSETS_ERROR',\n  error\n});\nexport const forexstart = () => ({\n  type: 'FETCH_START'\n});\nexport const forexfinished = rates => ({\n  type: 'FETCH_END',\n  rates\n});\nexport const forexerr = error => ({\n  type: 'FETCH_ERROR',\n  error\n});\nexport const registerClientUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  await axios.post('https://api.sortika.com/client/register', {\n    username: username,\n    email: email,\n    password: pass\n  }).then(res => {\n    console.log(res.data);\n\n    if (res.status == 201) {\n      dispatch(registerClientFinished('Success! Kindly check your mail for email verification link'));\n    } else if (res.status == 203) {\n      dispatch(registerError(res.data.message));\n    } else {\n      dispatch(registerError('server error encountered!'));\n    }\n  }).catch(error => {\n    console.log(error);\n    dispatch(registerError(error.message));\n  });\n};\nexport const registerTraderUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  let myfxprofile;\n  await axios.post('https://api.sortika.com/trader/myfx/', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res);\n\n    switch (res.data.status) {\n      case 419:\n        dispatch(stateError(res.data.info));\n        break;\n\n      case 417:\n        dispatch(stateError(res.data.info));\n        break;\n\n      case 200:\n        //calculate win ratio\n        let win_ratio = await calc.calculateWin(res.data.history);\n        let loss_ratio = await calc.calculateloss(res.data.history);\n        let avgprofit = await calc.calc_profitfactor(res.data.acc); // console.log(win_ratio+ ' '+loss_ratio+' '+avgprofit)\n        //calculate profit ratio\n        //calculate profit factor\n\n        await axios.post('https://api.sortika.com/trader/register', {\n          username: username,\n          email: email,\n          password: pass,\n          win_ratio: win_ratio,\n          loss_ratio: loss_ratio,\n          profit_factor: avgprofit\n        }).then(async res => {\n          console.log(res.data);\n          await dispatch(registertraderFinished(res.data.user, res.data.access_token, 'trader'));\n        }).catch(error => {\n          console.log(error);\n          dispatch(registerError(error.message));\n        });\n        break;\n\n      default:\n        dispatch(stateError('Server not available'));\n    }\n  }).catch(error => {\n    dispatch(stateError(error.message));\n    console.log(error);\n  });\n};\nexport const loginStart = () => ({\n  type: 'LOGIN_START'\n});\nexport const loginFinished = (user, token, usertype) => ({\n  type: 'LOGIN_FINISHED',\n  user,\n  token,\n  usertype\n});\nexport const loginError = error => ({\n  type: 'LOGIN_ERROR',\n  error\n});\nexport const loginClientUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('client ..............');\n  await axios.post('https://api.sortika.com/client/login', {\n    email: email,\n    password: pass\n  }).then(res => {\n    console.log(res.status);\n\n    switch (res.status) {\n      case 201:\n        dispatch(loginFinished(res.data.user, res.data.access_token, 'client'));\n        break;\n\n      case 401:\n        dispatch(loginError(res.data.message));\n        break;\n\n      case 417:\n        dispatch(loginError(res.data.message));\n        break;\n\n      default:\n        dispatch(loginError('server error'));\n    }\n  }).catch(error => {\n    console.log(error.message);\n    dispatch(loginError('invalid email/password'));\n  });\n};\nexport const loginTraderUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('trader ..............');\n  await axios.post('https://api.sortika.com/trader/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n\n    switch (res.data.code) {\n      case 200:\n        await dispatch(loginFinished(res.data.user, res.data.access_token, 'trader'));\n        break;\n\n      case 412:\n        dispatch(loginError(res.data.message));\n        break;\n\n      case 417:\n        dispatch(loginError(res.data.message));\n        break;\n\n      default:\n        dispatch(loginError('server error'));\n    }\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError('invalid email/password'));\n  });\n};\nexport const logoutStart = () => ({\n  type: 'LOGOUT_START'\n});\nexport const logoutFinished = () => ({\n  type: 'LOGOUT_FINISHED'\n});\nexport const logoutError = error => ({\n  type: 'LOGOUT_ERROR',\n  error\n});\nexport const logoutClientUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/client/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};\nexport const logoutTraderUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/trader/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};\nexport const getForex = () => async dispatch => {\n  dispatch(forexstart());\n  await axios.get('https://www.freeforexapi.com/api/live?pairs=EURGBP,USDJPY,USDCAD,USDEUR,NZDUSD,USDCHF,AUDUSD', {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    console.log(res.data.rates);\n    dispatch(forexfinished(res.data.rates));\n  }).catch(error => {\n    console.log(error);\n    dispatch(forexerr(error));\n  });\n};\nexport const getAssets = () => async dispatch => {\n  dispatch(assetstart());\n  await axios.get('http://risk-api.sortika.com/api/v1/settings/assets', {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => {\n    console.log(res.data);\n    dispatch(assetfinished(res.data));\n  }).catch(error => {\n    console.log(error);\n    dispatch(assets_err(error));\n  });\n}; ///Client Mpesa\n\nexport const clientbalance = amount => ({\n  type: 'FETCH_CLIENT_BALANCE',\n  amount\n});\nexport const traderbalance = amount => ({\n  type: 'FETCH_TRADER_BALANCE',\n  amount\n});\nexport const clientDepositMpesa = (phone, amount) => async dispatch => {\n  // dispatch(state_fetching())\n  await axios.post('https://api.sortika.com/client/payment/test', {\n    phone: phone,\n    amount: amount\n  }).then(async res => {\n    console.log(res);\n    let mID = res.data.MerchantRequestID;\n    await axios.post('https://api.sortika.com/client/payment/query', {\n      id: mID\n    }).then(res => {\n      console.log(res);\n      dispatch(clientbalance(res.data.info[0].Amount_paid));\n    }).catch(error => console.log(error)); // if(res.ResponseCode==0){\n    // let mID=res.MerchantRequestID\n    // }\n  }).catch(error => {\n    console.log(error);\n  });\n};\nexport const TraderDeposit = (amount, id) => async dispatch => {\n  // dispatch(state_fetching())\n  await axios.post('https://api.sortika.com/trader/deposit', {\n    id: id,\n    amount: amount\n  }).then(async res => {\n    console.log(res);\n    dispatch(traderbalance(res.data.info.amount));\n  }).catch(error => {\n    console.log(error);\n  });\n}; //forgot password\n\nexport const submitForgotemailTrader = email => async dispatch => {\n  dispatch(state_fetching());\n  await axios.post('https://api.sortika.com/trader/forgot_password', {\n    email: email\n  }).then(res => {\n    switch (res.status) {\n      case 201:\n        dispatch(state_success(res.data.message));\n        break;\n\n      case 417:\n        dispatch(state_fetch_error(res.data.message));\n        break;\n\n      case 401:\n        dispatch(state_fetch_error(res.data.message));\n        break;\n\n      default:\n        dispatch(state_fetch_error('Server error encountered'));\n    }\n  }).catch(error => {\n    console.log(error);\n    dispatch(state_fetch_error('server error encountered'));\n  });\n};\nexport const submitForgotemailClient = email => async dispatch => {\n  dispatch(state_fetching());\n  await axios.post('https://api.sortika.com/client/forgot_password', {\n    email: email\n  }).then(res => {\n    console.log(res);\n\n    switch (res.status) {\n      case 201:\n        dispatch(state_success(res.data.message));\n        break;\n\n      case 203:\n        dispatch(state_fetch_error(res.data.message));\n        break;\n\n      case 401:\n        dispatch(state_fetch_error(res.data.message));\n        break;\n\n      default:\n        dispatch(state_fetch_error('Server error encountered'));\n    }\n  }).catch(error => {\n    console.log(error);\n    dispatch(state_fetch_error('Server error encountered'));\n  });\n};","map":{"version":3,"sources":["/home/nathy/React_Apps/demo_1/src/pages/redux/Action.js"],"names":["axios","calc","stateError","error","type","not_fetching","state_fetching","state_success","message","state_fetch_error","registerStart","registerClientFinished","registertraderFinished","user","token","registerError","assetstart","assetfinished","assets","assets_err","forexstart","forexfinished","rates","forexerr","registerClientUser","username","email","pass","dispatch","post","password","then","res","console","log","data","status","catch","registerTraderUser","myfxprofile","info","win_ratio","calculateWin","history","loss_ratio","calculateloss","avgprofit","calc_profitfactor","acc","profit_factor","access_token","loginStart","loginFinished","usertype","loginError","loginClientUser","loginTraderUser","code","logoutStart","logoutFinished","logoutError","logoutClientUser","logoutTraderUser","getForex","get","headers","getAssets","clientbalance","amount","traderbalance","clientDepositMpesa","phone","mID","MerchantRequestID","id","Amount_paid","TraderDeposit","submitForgotemailTrader","submitForgotemailClient"],"mappings":"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","sourcesContent":["import axios from 'axios'\n// import { MyfxbookApi } from 'myfxbook-api-client';\nimport * as calc from './functionz'\n\n\n    //state actions\n\n    export const stateError = error => ({\n      type:'STATE_HAS_ERROR',\n      error\n    })\n\n    export const not_fetching=()=>({\n      type:'STATE_NOT_FETCHING'\n    })\n    export const state_fetching=()=>({\n      type:'STATE_FETCHING'\n    })\n    export const state_success=(message)=>({\n      type:'STATE_SUCCESSFUL',\n      message\n      \n    })\n      export const state_fetch_error= error =>({\n        type:'STATE_HAS_ERROR',\n        error\n      })  \n\n\n    //Auth Actions\n    export const registerStart = () => ({\n      type: 'REGISTER_START',\n    })\n    \n    export const registerClientFinished=(message)=>({\n      type:'REGISTER_CLIENT_FINISHED',\n      message\n    })\n    export const registertraderFinished = (user,token,type) => ({\n      type: 'REGISTER_TRADER_FINISHED',\n      user,\n      token,\n      type\n    })\n\n    export const registerError = error => ({\n      type:'REGISTER_ERROR',\n      error\n    })\n\n    export const assetstart=()=>({\n      type:'FETCH_ASSETS_START',\n\n    })\n\n    export const assetfinished=(assets)=>({\n      type:'FETCH_ASSETS_END',\n      assets\n    })\n\n    export const assets_err=(error)=>({\n      type:'FETCH_ASSETS_ERROR',\n      error\n    })\n  \n\n    export const forexstart=()=>({\n      type:'FETCH_START',\n\n    })\n\n    export const forexfinished=(rates)=>({\n      type:'FETCH_END',\n      rates\n    })\n\n    export const forexerr=(error)=>({\n      type:'FETCH_ERROR',\n      error\n    })\n  \n   export const registerClientUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n\n      \n      \n      await axios.post('https://api.sortika.com/client/register',\n      {\n        username:username,\n        email:email,\n        password:pass\n      })\n      .then((res)=>{ \n             \n        console.log(res.data)\n          if(res.status==201){\n            dispatch(registerClientFinished('Success! Kindly check your mail for email verification link'))\n          }\n          else if(res.status == 203){\n            dispatch(registerError(res.data.message))\n          }\n          else {\n            dispatch(registerError('server error encountered!'))\n          }\n          })\n          \n  .catch ((error) =>{\n    \n    console.log(error);\n    dispatch(registerError(error.message))\n \n    \n  })\n    }\n   export const registerTraderUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n        let myfxprofile;\n\n        await axios.post('https://api.sortika.com/trader/myfx/',\n      { \n        email:email,\n        password:pass\n      }).then(async(res)=>{\n          console.log(res)\n          switch (res.data.status){\n\n            case 419 :\n              dispatch(stateError(res.data.info))\n              break\n\n              case 417:\n                dispatch(stateError(res.data.info))\n                break\n                case 200:\n                  //calculate win ratio\n                    let win_ratio=await calc.calculateWin(res.data.history)\n                    let loss_ratio=await calc.calculateloss(res.data.history)\n                    let avgprofit =await calc.calc_profitfactor(res.data.acc)\n\n                // console.log(win_ratio+ ' '+loss_ratio+' '+avgprofit)\n                  //calculate profit ratio\n                  //calculate profit factor\n\n                  await axios.post('https://api.sortika.com/trader/register',\n            {\n              username:username,\n              email:email,\n              password:pass,\n              win_ratio:win_ratio,\n              loss_ratio:loss_ratio,\n              profit_factor:avgprofit\n\n            }).then( async(res)=>{ \n                  \n                      console.log(res.data)\n                        await  dispatch(registertraderFinished(res.data.user,res.data.access_token,'trader'))\n                        })\n                        \n                .catch ((error) =>{\n                  \n                  console.log(error);\n                  dispatch(registerError(error.message))\n              \n                  \n                })\n\n                  break\n              default:\n                dispatch(stateError('Server not available'))\n          }\n         \n        }).catch((error) =>{\n          dispatch(stateError(error.message))\n          console.log(error)\n        })\n       \n\n \n      \n    }\n\n\n    export const loginStart = () => ({\n        type: 'LOGIN_START',\n      })\n      \n      export const loginFinished = (user,token,usertype) => ({\n        type: 'LOGIN_FINISHED',\n        user,\n        token,\n        usertype\n      })\n      \n      export const loginError = error => ({\n        type:'LOGIN_ERROR',\n        error\n      })\n      export const loginClientUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('client ..............')\n\n        await axios.post('https://api.sortika.com/client/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then((res)=>{ \n          console.log(res.status)\n          switch(res.status){\n            case 201:\n                dispatch(loginFinished(res.data.user,res.data.access_token,'client'))\n            break\n            case 401:\n              dispatch(loginError(res.data.message))\n              break\n            case 417:\n                dispatch(loginError(res.data.message))\n                break\n            default:\n                  dispatch(loginError('server error'))\n          }\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error.message);\n      dispatch(loginError('invalid email/password'))\n   \n    })\n      }\n      export const loginTraderUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('trader ..............')\n        await axios.post('https://api.sortika.com/trader/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n          switch(res.data.code){\n            case 200:\n              await  dispatch(loginFinished(res.data.user,res.data.access_token,'trader'))\n\n            break\n            case 412:\n              dispatch(loginError(res.data.message))\n              break\n            case 417:\n                dispatch(loginError(res.data.message))\n                break\n            default:\n                  dispatch(loginError('server error'))\n          }\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError('invalid email/password'))\n   \n      \n    })\n      }\n\n      export const logoutStart = () => ({\n        type: 'LOGOUT_START'\n      })\n      \n     export const logoutFinished = () => ({\n        type: 'LOGOUT_FINISHED'\n      })\n      \n      export const logoutError = error => ({\n        type: 'LOGOUT_ERROR',\n        error\n      })\n\n  export const logoutClientUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/client/logout?token='+token)\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }\n  export const logoutTraderUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/trader/logout?token='+token,\n    \n    )\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }\n\n    export const getForex=()=>async(dispatch)=>{\n      dispatch(forexstart())\n\n        await axios.get('https://www.freeforexapi.com/api/live?pairs=EURGBP,USDJPY,USDCAD,USDEUR,NZDUSD,USDCHF,AUDUSD',\n        {\n        headers:{\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json',\n        }\n      }\n        ).then((res)=>{\n          console.log(res.data.rates)\n          dispatch(forexfinished(res.data.rates))\n        }).catch((error)=>{\n          console.log(error)\n          dispatch(forexerr(error))\n        })\n\n    }\n    export const getAssets=()=>async(dispatch)=>{\n      dispatch(assetstart())\n\n        await axios.get('http://risk-api.sortika.com/api/v1/settings/assets',\n        {\n        headers:{\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json',\n        }\n      }\n        ).then((res)=>{\n          console.log(res.data)\n          dispatch(assetfinished(res.data))\n        }).catch((error)=>{\n          console.log(error)\n          dispatch(assets_err(error))\n        })\n\n    }\n\n\n\n\n    ///Client Mpesa\n    export const clientbalance= amount=>({\n\n        type:'FETCH_CLIENT_BALANCE',\n        amount\n    })\n    export const traderbalance= amount=>({\n\n        type:'FETCH_TRADER_BALANCE',\n        amount\n    })\n\n    export const clientDepositMpesa=(phone,amount)=>async(dispatch)=>{\n      // dispatch(state_fetching())\n      await axios.post('https://api.sortika.com/client/payment/test',{\n        phone:phone,\n        amount:amount\n      }).then( async (res)=>{\n\n        console.log(res)\n        let mID=res.data.MerchantRequestID\n\n          await axios.post('https://api.sortika.com/client/payment/query',{\n            id:mID\n          }).then((res)=>{\n            console.log(res)\n            dispatch(clientbalance(res.data.info[0].Amount_paid))\n          }).catch(error=>console.log(error))\n\n          // if(res.ResponseCode==0){\n        // let mID=res.MerchantRequestID\n          // }\n      }).catch((error)=>{\n        console.log(error)\n      })\n    }\n\n    export const TraderDeposit=(amount,id)=>async(dispatch)=>{\n      // dispatch(state_fetching())\n      await axios.post('https://api.sortika.com/trader/deposit',{\n        id:id,\n        amount:amount\n      }).then( async (res)=>{\n\n        console.log(res)\n          dispatch(traderbalance(res.data.info.amount))\n\n        \n      }).catch((error)=>{\n        console.log(error)\n      })\n    }\n\n\n    //forgot password\n    export const submitForgotemailTrader=(email)=>async(dispatch)=>{\n            dispatch(state_fetching())\n            await axios.post('https://api.sortika.com/trader/forgot_password',\n            {\n              email:email\n            }).then((res)=>{\n                 \n              switch(res.status){\n\n                case 201:\n                    dispatch(state_success(res.data.message))\n      \n                break\n                case 417:\n                    dispatch(state_fetch_error(res.data.message))\n                break\n      \n                case 401:\n                    dispatch(state_fetch_error(res.data.message))\n                break\n      \n                default:\n                    dispatch(state_fetch_error('Server error encountered'))\n      \n              }\n            \n            }).catch((error)=>{\n              console.log(error)\n              dispatch(state_fetch_error('server error encountered'))\n            })\n\n    }\n    export const submitForgotemailClient=(email)=>async(dispatch)=>{\n      dispatch(state_fetching())\n      await axios.post('https://api.sortika.com/client/forgot_password',\n      {\n        email:email\n      }).then((res)=>{\n           console.log(res)\n        switch(res.status){\n\n          case 201:\n              dispatch(state_success(res.data.message))\n\n          break\n          case 203:\n              dispatch(state_fetch_error(res.data.message))\n          break\n\n          case 401:\n              dispatch(state_fetch_error(res.data.message))\n          break\n\n          default:\n              dispatch(state_fetch_error('Server error encountered'))\n\n        }\n      \n      }).catch((error)=>{\n        console.log(error)\n        dispatch(state_fetch_error('Server error encountered'))\n      })\n    }"]},"metadata":{},"sourceType":"module"}