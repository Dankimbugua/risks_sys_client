{"ast":null,"code":"export const calculateWin = async dat => {\n  let wins = [];\n  await dat.forEach(async trade => {\n    await trade.history.forEach(async td => {\n      if (td.profit > 0) {\n        await wins.push(td);\n      }\n    });\n  });\n  let winratio = dat.length / wins.length;\n  return Math.round((winratio + Number.EPSILON) * 100) / 100;\n};\nexport const calculateloss = async dat => {\n  let loss = [];\n  await dat.forEach(async trade => {\n    await trade.history.forEach(async td => {\n      if (td.profit < 0) {\n        await loss.push(td);\n      }\n    });\n  });\n  let lossratio = dat.length / loss.length;\n  return Math.round((lossratio + Number.EPSILON) * 100) / 100;\n};\nexport const calc_profitfactor = async accounts => {\n  let profits = [];\n  await accounts.forEach(async account => {\n    profits.push(account.profitFactor);\n  });\n  let sum = profits.reduce((previous, current) => current += previous);\n  let avgprofit = sum / profits.length;\n  return Math.round((avgprofit + Number.EPSILON) * 100) / 100;\n};","map":{"version":3,"sources":["/home/nathy/React_Apps/demo_1/src/pages/redux/functionz.js"],"names":["calculateWin","dat","wins","forEach","trade","history","td","profit","push","winratio","length","Math","round","Number","EPSILON","calculateloss","loss","lossratio","calc_profitfactor","accounts","profits","account","profitFactor","sum","reduce","previous","current","avgprofit"],"mappings":"AAAA,OAAO,MAAOA,YAAY,GAAG,MAAMC,GAAN,IAAc;AAEnC,MAAIC,IAAI,GAAC,EAAT;AACD,QAAMD,GAAG,CAACE,OAAJ,CAAY,MAAMC,KAAN,IAAc;AAE5B,UAAMA,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAsB,MAAMG,EAAN,IAAW;AAClC,UAAGA,EAAE,CAACC,MAAH,GAAY,CAAf,EAAiB;AACd,cAAML,IAAI,CAACM,IAAL,CAAUF,EAAV,CAAN;AACF;AACJ,KAJI,CAAN;AAKF,GAPI,CAAN;AASC,MAAIG,QAAQ,GAACR,GAAG,CAACS,MAAJ,GAAaR,IAAI,CAACQ,MAA/B;AAEA,SAAOC,IAAI,CAACC,KAAL,CAAW,CAACH,QAAQ,GAAEI,MAAM,CAACC,OAAlB,IAA6B,GAAxC,IAA+C,GAAtD;AACL,CAfI;AAiBL,OAAO,MAAOC,aAAa,GAAG,MAAMd,GAAN,IAAc;AAE1C,MAAIe,IAAI,GAAC,EAAT;AACD,QAAMf,GAAG,CAACE,OAAJ,CAAY,MAAMC,KAAN,IAAc;AAE5B,UAAMA,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAsB,MAAMG,EAAN,IAAW;AAClC,UAAGA,EAAE,CAACC,MAAH,GAAY,CAAf,EAAiB;AACd,cAAMS,IAAI,CAACR,IAAL,CAAUF,EAAV,CAAN;AACF;AACJ,KAJI,CAAN;AAKF,GAPI,CAAN;AASC,MAAIW,SAAS,GAAChB,GAAG,CAACS,MAAJ,GAAaM,IAAI,CAACN,MAAhC;AAEA,SAAOC,IAAI,CAACC,KAAL,CAAW,CAACK,SAAS,GAAEJ,MAAM,CAACC,OAAnB,IAA8B,GAAzC,IAAgD,GAAvD;AACH,CAfQ;AAiBT,OAAO,MAAMI,iBAAiB,GAAG,MAAMC,QAAN,IAAmB;AAE5C,MAAKC,OAAO,GAAE,EAAd;AACL,QAAMD,QAAQ,CAAChB,OAAT,CAAiB,MAAMkB,OAAN,IAAgB;AAC/BD,IAAAA,OAAO,CAACZ,IAAR,CAAaa,OAAO,CAACC,YAArB;AACN,GAFI,CAAN;AAIC,MAAIC,GAAG,GAACH,OAAO,CAACI,MAAR,CAAe,CAACC,QAAD,EAAWC,OAAX,KAAuBA,OAAO,IAAID,QAAjD,CAAR;AAEA,MAAIE,SAAS,GAAGJ,GAAG,GAAGH,OAAO,CAACV,MAA9B;AAGA,SAAOC,IAAI,CAACC,KAAL,CAAW,CAACe,SAAS,GAAEd,MAAM,CAACC,OAAnB,IAA8B,GAAzC,IAAgD,GAAvD;AACH,CAbM","sourcesContent":["export const  calculateWin = async(dat) => {\n  \n        let wins=[]\n       await dat.forEach(async(trade)=>{\n\n           await trade.history.forEach(async(td)=>{\n                if(td.profit > 0){\n                   await wins.push(td)\n                }\n            })\n        })\n\n        let winratio=dat.length / wins.length\n        \n        return Math.round((winratio+ Number.EPSILON) * 100) / 100\n  }\n\n  export const  calculateloss = async(dat) => {\n  \n    let loss=[]\n   await dat.forEach(async(trade)=>{\n\n       await trade.history.forEach(async(td)=>{\n            if(td.profit < 0){\n               await loss.push(td)\n            }\n        })\n    })\n\n    let lossratio=dat.length / loss.length\n    \n    return Math.round((lossratio+ Number.EPSILON) * 100) / 100\n}\n\nexport const calc_profitfactor = async(accounts) => {\n  \n        let  profits =[]\n   await accounts.forEach(async(account)=>{\n           profits.push(account.profitFactor)\n    })\n\n    let sum=profits.reduce((previous, current) => current += previous)\n\n    let avgprofit = sum / profits.length\n    \n    \n    return Math.round((avgprofit+ Number.EPSILON) * 100) / 100\n}\n\n"]},"metadata":{},"sourceType":"module"}