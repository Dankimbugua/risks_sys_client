{"ast":null,"code":"import axios from 'axios'; // import { MyfxbookApi } from 'myfxbook-api-client';\n//state actions\n\nexport const stateError = () => ({\n  type: 'STATE_HAS_ERROR',\n  error\n}); //Auth Actions\n\nexport const registerStart = () => ({\n  type: 'REGISTER_START'\n});\nexport const registerFinished = (user, token, usertype) => ({\n  type: 'REGISTER_FINISHED',\n  user,\n  token,\n  usertype\n});\nexport const registerError = error => ({\n  type: 'REGISTER_ERROR',\n  error\n});\nexport const registerClientUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  await axios.post('https://api.sortika.com/client/register', {\n    username: username,\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(registerFinished(res.data.user, res.data.access_token, 'client'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(registerError(error));\n  });\n};\nexport const registerTraderUser = (username, email, pass) => async dispatch => {\n  dispatch(registerStart());\n  let myfxerror;\n  let myfxprofile;\n  await axios.post('https://api.sortika.com/trader/myfx', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    myfxerror = res.data.error;\n    myfxprofile = res.data.accounts; //  console.log(myfxprofile)\n  }).catch(error => {\n    console.log(error);\n  });\n\n  if (!myfxerror) {\n    await axios.post('https://api.sortika.com/trader/register', {\n      username: username,\n      email: email,\n      password: pass // profile:myfxprofile\n\n    }).then(async res => {\n      console.log(res.data);\n      await dispatch(registerFinished(res.data.user, res.data.access_token, 'trader'));\n    }).catch(error => {\n      console.log(error);\n      dispatch(registerError(error));\n    });\n  } else {\n    await dispatch(stateError('No Account with given credentials was found in MyFxBook'));\n  }\n};\nexport const loginStart = () => ({\n  type: 'LOGIN_START'\n});\nexport const loginFinished = (user, token, usertype) => ({\n  type: 'LOGIN_FINISHED',\n  user,\n  token,\n  usertype\n});\nexport const loginError = error => ({\n  type: 'LOGIN_ERROR',\n  error\n});\nexport const loginClientUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('client ..............');\n  await axios.post('https://api.sortika.com/client/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token, 'client'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const loginTraderUser = (email, pass) => async dispatch => {\n  dispatch(loginStart());\n  console.log('trader ..............');\n  await axios.post('https://api.sortika.com/trader/login', {\n    email: email,\n    password: pass\n  }).then(async res => {\n    console.log(res.data);\n    await dispatch(loginFinished(res.data.user, res.data.access_token, 'trader'));\n  }).catch(error => {\n    console.log(error);\n    dispatch(loginError(error));\n  });\n};\nexport const logoutStart = () => ({\n  type: 'LOGOUT_START'\n});\nexport const logoutFinished = () => ({\n  type: 'LOGOUT_FINISHED'\n});\nexport const logoutError = error => ({\n  type: 'LOGOUT_ERROR',\n  error\n});\nexport const logoutClientUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/client/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};\nexport const logoutTraderUser = token => async dispatch => {\n  console.log('logging out>>>');\n  dispatch(logoutStart()); // try {\n\n  await axios.post('https://api.sortika.com/trader/logout?token=' + token).then(() => {\n    dispatch(logoutFinished());\n  }).catch(error => {\n    dispatch(logoutError(error));\n  });\n};","map":{"version":3,"sources":["/home/nathy/React_Apps/demo_1/src/pages/redux/Action.js"],"names":["axios","stateError","type","error","registerStart","registerFinished","user","token","usertype","registerError","registerClientUser","username","email","pass","dispatch","post","password","then","res","console","log","data","access_token","catch","registerTraderUser","myfxerror","myfxprofile","accounts","loginStart","loginFinished","loginError","loginClientUser","loginTraderUser","logoutStart","logoutFinished","logoutError","logoutClientUser","logoutTraderUser"],"mappings":"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","sourcesContent":["import axios from 'axios'\n// import { MyfxbookApi } from 'myfxbook-api-client';\n\n\n\n    //state actions\n\n    export const stateError =()=> ({\n      type:'STATE_HAS_ERROR',\n      error\n    })\n    //Auth Actions\n    export const registerStart = () => ({\n      type: 'REGISTER_START',\n    })\n    \n    export const registerFinished = (user,token,usertype) => ({\n      type: 'REGISTER_FINISHED',\n      user,\n      token,\n      usertype\n    })\n    \n    export const registerError = error => ({\n      type:'REGISTER_ERROR',\n      error\n    })\n   export const registerClientUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n\n      \n      \n      await axios.post('https://api.sortika.com/client/register',\n      {\n        username:username,\n        email:email,\n        password:pass\n      })\n      .then( async(res)=>{ \n             \n        console.log(res.data)\n           await  dispatch(registerFinished(res.data.user,res.data.access_token,'client'))\n          })\n          \n  .catch ((error) =>{\n    \n    console.log(error);\n    dispatch(registerError(error))\n \n    \n  })\n    }\n   export const registerTraderUser =  (username,email,pass) => async(dispatch)=>{\n      dispatch(registerStart())\n      let myfxerror;\n        let myfxprofile;\n\n        await axios.post('https://api.sortika.com/trader/myfx',\n      { \n        email:email,\n        password:pass\n      }).then(async(res)=>{\n           console.log(res.data)\n           myfxerror=res.data.error\n\n           myfxprofile=res.data.accounts\n          //  console.log(myfxprofile)\n        }).catch((error) =>{\n          console.log(error)\n        })\n       \n\n \n        if(!myfxerror){\n\n          \n            await axios.post('https://api.sortika.com/trader/register',\n            {\n              username:username,\n              email:email,\n              password:pass\n              // profile:myfxprofile\n            })\n            .then( async(res)=>{ \n                  \n              console.log(res.data)\n                await  dispatch(registerFinished(res.data.user,res.data.access_token,'trader'))\n                })\n                \n        .catch ((error) =>{\n          \n          console.log(error);\n          dispatch(registerError(error))\n      \n          \n        })\n      }\n      else {\n        await dispatch(stateError('No Account with given credentials was found in MyFxBook'))\n      }\n    }\n    export const loginStart = () => ({\n        type: 'LOGIN_START',\n      })\n      \n      export const loginFinished = (user,token,usertype) => ({\n        type: 'LOGIN_FINISHED',\n        user,\n        token,\n        usertype\n      })\n      \n      export const loginError = error => ({\n        type:'LOGIN_ERROR',\n        error\n      })\n      export const loginClientUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('client ..............')\n\n        await axios.post('https://api.sortika.com/client/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token,'client'))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n      export const loginTraderUser =  (email,pass) => async(dispatch)=>{\n        dispatch(loginStart())\n        console.log('trader ..............')\n        await axios.post('https://api.sortika.com/trader/login',\n        {\n          email:email,\n          password:pass\n        })\n        .then( async(res)=>{ \n               \n          console.log(res.data)\n             await  dispatch(loginFinished(res.data.user,res.data.access_token,'trader'))\n            })\n            \n    .catch ((error) =>{\n      \n      console.log(error);\n      dispatch(loginError(error))\n   \n      \n    })\n      }\n\n      export const logoutStart = () => ({\n        type: 'LOGOUT_START'\n      })\n      \n     export const logoutFinished = () => ({\n        type: 'LOGOUT_FINISHED'\n      })\n      \n      export const logoutError = error => ({\n        type: 'LOGOUT_ERROR',\n        error\n      })\n\n  export const logoutClientUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/client/logout?token='+token)\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }\n  export const logoutTraderUser =  (token) => async(dispatch) => {\n    console.log('logging out>>>')\n    dispatch(logoutStart())\n    // try {\n    await  axios.post('https://api.sortika.com/trader/logout?token='+token)\n    .then(() => {\n        dispatch(logoutFinished())\n    }).catch((error)=>{\n\n        dispatch(logoutError(error))\n\n    })\n    }"]},"metadata":{},"sourceType":"module"}